use octavo::digest::tiger::*;

use digest::Test;

const TESTS: &'static [Test<'static>] = &[
    Test {
        input: b"",
        output: &[
            0x60, 0xef, 0x6c, 0x0d, 0xbc, 0x07, 0x7b, 0x9c, 0x17, 0x5f, 0xfb, 0x77, 0x71, 0x00,
            0x8c, 0x25, 0x3b, 0xac, 0xea, 0x02, 0x4c, 0x9d, 0x01, 0xab
        ],
    },
    Test {
        input: b"abc",
        output: &[0xc7, 0x9e, 0x79, 0x9e, 0x14, 0xb5, 0x3e, 0x7d, 0xf9, 0x35, 0xd8, 0x34, 0x77,
        0xfa, 0x4d, 0xf9, 0x39, 0xd1, 0x8c, 0x44, 0xf7, 0x6b, 0x73, 0xcd]
    },
    Test {
        input: b"Tiger",
        output: &[0xa2, 0x4e, 0xe9, 0x54, 0x0c, 0x41, 0xd7, 0x1b, 0x6a, 0x62, 0x6f, 0x9d, 0xdf,
        0x41, 0xd1, 0x2e, 0x30, 0x31, 0x27, 0x2b, 0x6a, 0xab, 0xbd, 0x9a]
    },
    Test {
        input: b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-",
        output: &[0xaf, 0x58, 0xf9, 0xc0, 0x5b, 0x88, 0x60, 0x48, 0xc1, 0x6f, 0x48, 0xbc, 0x90,
        0x4b, 0xef, 0xfd, 0xa8, 0x38, 0xf0, 0x05, 0xff, 0x74, 0x03, 0x5e]
    },
    Test {
        input: b"ABCDEFGHIJKLMNOPQRSTUVWXYZ=abcdefghijklmnopqrstuvwxyz+0123456789",
        output: &[0x76, 0xaa, 0x09, 0x2e, 0x58, 0x9b, 0x0f, 0x0b, 0x8b, 0x78, 0x09, 0x44, 0xad,
        0x1f, 0x0c, 0x41, 0xc9, 0xa5, 0xce, 0xb3, 0x07, 0xd2, 0xfd, 0xe0]
    },
    Test {
        input: b"Tiger - A Fast New Hash Function, by Ross Anderson and Eli Biham",
        output: &[0x82, 0x81, 0x5d, 0x89, 0x24, 0xe2, 0xf1, 0x1a, 0x88, 0xc0, 0xf2, 0x92, 0x91,
        0x4c, 0x6c, 0xfd, 0xbf, 0xd8, 0xe7, 0x8e, 0x2c, 0xf2, 0x9a, 0xd0]
    },
    Test {
        input: b"Tiger - A Fast New Hash Function, by Ross Anderson and Eli Biham, proceedings of Fast Software Encryption 3, Cambridge.",
        output: &[0x48, 0x1f, 0x6d, 0xd0, 0xdf, 0x57, 0xe1, 0x03, 0xd7, 0xde, 0x0b, 0x66, 0x3a,
        0xdb, 0x05, 0xf5, 0x03, 0xb8, 0x77, 0xf2, 0x76, 0xad, 0xb2, 0x86]
    },
    Test {
        input: b"Tiger - A Fast New Hash Function, by Ross Anderson and Eli Biham, proceedings of Fast Software Encryption 3, Cambridge, 1996.",
        output: &[0x69, 0x6d, 0x99, 0x60, 0x61, 0x88, 0x47, 0x25, 0x9f, 0x2f, 0xa5, 0x80, 0xdb,
        0x2f, 0x95, 0x55, 0x96, 0xd7, 0xbe, 0xa2, 0x04, 0x6f, 0x46, 0xd7]
    },
    Test {
        input: b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-",
        output: &[0x27, 0x20, 0xa3, 0x8d, 0x7f, 0x08, 0x75, 0x54, 0x5f, 0xd9, 0x61, 0x4f, 0x48,
        0xf7, 0xe6, 0x7a, 0x92, 0xd3, 0x74, 0x69, 0xda, 0x2e, 0xf3, 0x78]
    },
];

#[test]
fn example_implementation_vectors() {
    for test in TESTS {
        test.test(Tiger::default());
    }
}
